// 문제
// 트리에서 리프 노드란, 자식의 개수가 0인 노드를 말한다.

// 트리가 주어졌을 때, 노드 하나를 지울 것이다. 그 때, 남은 트리에서 리프 노드의 개수를 구하는 프로그램을 작성하시오. 노드를 지우면 그 노드와 노드의 모든 자손이 트리에서 제거된다.

// 예를 들어, 다음과 같은 트리가 있다고 하자.



// 현재 리프 노드의 개수는 3개이다. (초록색 색칠된 노드) 이때, 1번을 지우면, 다음과 같이 변한다. 검정색으로 색칠된 노드가 트리에서 제거된 노드이다.



// 이제 리프 노드의 개수는 1개이다.

// 입력
// 첫째 줄에 트리의 노드의 개수 N이 주어진다. N은 50보다 작거나 같은 자연수이다. 둘째 줄에는 0번 노드부터 N-1번 노드까지, 각 노드의 부모가 주어진다. 만약 부모가 없다면 (루트) -1이 주어진다. 셋째 줄에는 지울 노드의 번호가 주어진다.

// 출력
// 첫째 줄에 입력으로 주어진 트리에서 입력으로 주어진 노드를 지웠을 때, 리프 노드의 개수를 출력한다.

// 예제 입력 1  복사
// 5
// -1 0 0 1 1
// 2
// 예제 출력 1  복사
// 2
// 예제 입력 2  복사
// 5
// -1 0 0 1 1
// 1
// 예제 출력 2  복사
// 1
// 예제 입력 3  복사
// 5
// -1 0 0 1 1
// 0
// 예제 출력 3  복사
// 0
// 예제 입력 4  복사
// 9
// -1 0 0 2 2 4 4 6 6
// 4
// 예제 출력 4  복사
// 2


#include<bits/stdc++.h>
using namespace std;
int n, r, temp, root;
vector<int> adj[54];
int dfs(int here){ // 리프노드수를 구하는 함수 
    int ret = 0;
    int child = 0;
    for(int there : adj[here]){ // 자식노드가 있는지 없는지 돌려주는 루프 
        if(there == r) continue; // 지우는 노드를 구현 
        ret += dfs(there);  // 2.여기서 ret에서 더해짐 
        child++;  // 자식노드가 있으면 child수 증가 
    }
    if(child == 0) return 1;   //1.리프노드에서 1이 더해지는게 
    return ret;
}
int main(){
    ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
    cin >> n;
    for(int i = 0; i < n; i++){
        cin >> temp;
        if(temp == -1)root = i;
        else adj[temp].push_back(i);
    }
    cin >> r;
    if(r == root){ //루트노드가 지워질때는 한번도 탐색하지 않아 0 이다
        cout << 0 << "\n";return 0;
    }
    cout << dfs(root) << "\n";
    return 0;
}